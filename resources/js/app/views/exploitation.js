import { apiService } from '../services/apiService.js';
import { latLng, Icon } from "leaflet";
import { LMap, LTileLayer, LMarker, LControl, LPopup, LTooltip, LIcon } from 'vue2-leaflet';
import axios from 'axios';

// Fix missing default icon
delete Icon.Default.prototype._getIconUrl;
Icon.Default.mergeOptions({
    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
    iconUrl: require('leaflet/dist/images/marker-icon.png'),
    shadowUrl: require('leaflet/dist/images/marker-shadow.png'),
});

export default {
    components: {
        LMap,
        LTileLayer,
        LMarker,
        LControl,
        LPopup,
        LTooltip,
        LIcon
    },

    props: {

    },

    data() {
        return {
            valid: true,
            exploitation: [],
            isLoading: false,
            isEdited: false,
            items: [],
            select: null,
            url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            center: [-21.1287074, 55.4627191],
            zoom: 10,
            markers: [],
            bestProds: [],
            searchAutocomplete: null,
            rules: [v => (!!v && v.length <= 40) || 'Max 40 caratÃ¨res'],
            description: null,
        }
    },

    watch: {
        searchAutocomplete(val) {
            if (val != null && val.length >= 3) {
                this.searchAddress(val)
            } else {
                this.items = [];
            }
        }
    },

    created() {
        this.defaultInfo()
    },

    methods: {
        zoomUpdated(zoom) {
            this.zoom = zoom;
        },
        centerUpdated(center) {
            this.center = center;
        },
        resetZoom() {
            this.zoom = 10;
            this.center = [-21.1287074, 55.4627191];
        },
        activeEdit() {
            this.isEdited = true;
        },
        disabledEdit(){
            this.isEdited = false;
            this.defaultInfo()
        },
        async defaultInfo() {
            try {
                const defaultReq = await apiService.get(`${location.origin}/api/exploitations/owner`);
                const defaultData = defaultReq.data.data;
                if(defaultData.length != 0) {
                    this.exploitation = defaultData;
                    this.description = defaultData[0].description;
                    this.isLoading = true;
                }
            } catch (error) {
                this.flashMessage.error({
                    title: "Une erreur est survenue",
                    time: 8000,
                })
            }
        },
        async searchAddress(val) {
            try {
                const searchReq = await axios.get(`https://api-adresse.data.gouv.fr/search/?q=${val}&type=housenumber&autocomplete=1`)
                if(searchReq.status == 200) {
                    const searchData = searchReq.data.features;
                    this.items = searchData;
                }
            } catch (error) {
                console.error(error)
            }
        },
        async saveData() {
            try {
                let dataSend;
                await this.$refs.form.validate();
                if(this.valid) {

                    if (this.select != null) {
                        dataSend = {
                            description: this.description,
                            address: this.select.properties.label,
                            lattitude: this.select.geometry.coordinates[1],
                            longitude: this.select.geometry.coordinates[0]
                        }
                    } else {
                        dataSend = {
                            description: this.description,
                            address: this.exploitation[0].address,
                            lattitude: this.exploitation[0].coordinates[0],
                            longitude: this.exploitation[0].coordinates[1],
                        }
                    }

                    await apiService.post(`${location.origin}/api/exploitation/owner/add`, dataSend);
                    this.defaultInfo();
                    this.disabledEdit();
                    this.$refs.form.resetValidation();
                }
            } catch (error) {
                console.log(error)
                this.flashMessage.error({
                    title: "Une erreur est survenue",
                    time: 8000,
                })
            }
        }
    }
}